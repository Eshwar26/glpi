# glpi_agent/task/inventory/win32/usb.py

from glpi_agent.task.inventory.module import InventoryModule
from glpi_agent.tools.win32 import get_wmi_objects
from glpi_agent.tools.usb import USB


class USBDevices(InventoryModule):
    """Windows USB inventory module."""
    
    @staticmethod
    def category():
        return "usb"
    
    def is_enabled(self, **params):
        return True
    
    def do_inventory(self, **params):
        inventory = params.get('inventory')
        logger = params.get('logger')
        datadir = params.get('datadir')
        
        for device in self._get_devices(logger=logger, datadir=datadir):
            inventory.add_entry(
                section='USBDEVICES',
                entry=device
            )
    
    def _get_devices(self, **params):
        devices = []
        seen = set()
        
        for device in self._get_devices_from_wmi(**params):
            if device.skip():
                continue
            
            # Avoid duplicates
            dedupkey = f"{device.vendorid()}-{device.productid()}-{device.serial()}"
            if dedupkey in seen:
                continue
            seen.add(dedupkey)
            
            # cleanup pseudo serial generated by windows
            if device.serial() and '&' in device.serial():
                device.delete_serial()
            
            # Update device
            device.update_by_ids()
            device.update()
            
            devices.append(device.dump())
        
        return devices
    
    def _get_devices_from_wmi(self, **params):
        devices = []
        
        for obj in get_wmi_objects(
            class_name='CIM_LogicalDevice',
            properties=['Caption', 'DeviceID', 'Name']
        ):
            device_id = obj.get('DeviceID', '')
            
            import re
            match = re.match(r'^USB\\VID_(\w+)&PID_(\w+)\\(.*)$', device_id)
            if not match:
                continue
            
            vendorid, productid, serial = match.groups()
            
            # Support manufacturers wrongly using iSerial with fields definition
            sn_match = re.match(r'^S/N:([0-9A-F]+)', serial, re.IGNORECASE)
            if sn_match:
                serial = sn_match.group(1)
            
            device = USB(
                logger=params.get('logger'),
                caption=obj.get('Caption'),
                name=obj.get('Name'),
                vendorid=vendorid,
                productid=productid,
                serial=serial
            )
            devices.append(device)
        
        return devices